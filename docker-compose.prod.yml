version: '3'

services:
  rethinkdb:
    image: rethinkdb:2.3.6
    container_name: rethinkdb
    restart: unless-stopped
    #ports:
    #  - "28015:28015"
    #  - "8088:8080"
    volumes:
      #remove bind mount?
      - rethink_data_prod:/data
    networks:
      - traefik

  horizon:
    image: rethinkdb/horizon
    container_name: horizon
    restart: unless-stopped
    command: su -s /bin/sh horizon -c "hz serve --dev --connect rethinkdb://rethinkdb:28015 --bind all /usr/app"
    volumes:
      #need to get rid of this.  use dockerfile?
      - ./client:/usr/app
    ports:
      - "8181:8181"
    depends_on:
      - rethinkdb
    networks:
      - traefik

  django:
    build:
      context: ./server/
      dockerfile: dockerfile-prod
    container_name: django
    restart: unless-stopped
    command: bash -c "gunicorn redctf.wsgi:application --log-file=- --bind 0.0.0.0:8000"
    #command: bash -c "python3 manage.py runserver 0.0.0.0:8000"
    volumes:
      # So that Django can interact with Docker host
      - /var/run/docker.sock:/var/run/docker.sock
      #remove bind mount?
      #- ./server:/code
      # for serving django admin css, etc.
      - static_volume_prod:/home/app/redctf/static
      - media_volume_prod:/home/app/redctf/media
    ports:
      - "8000:8000"
      #- "3456:3456"
    environment:
      - RDB_HOST=rethinkdb
      - RDB_PORT=28015
    depends_on:
      - horizon
      - postgres
    networks:
      - traefik
    env_file:
      - ./server/.env.prod
    labels:
      - traefik.http.routers.errorhandler.service=errorhandler-backend
      - traefik.http.services.errorhandler-backend.loadbalancer.server.port=8000

  postgres:
    image: postgres:12.2
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    networks:
      - traefik
    env_file:
      - ./server/.env.prod.db

#   react:
#     build: ./client/
#     container_name: react
#     restart: unless-stopped
#     command: bash -c "cd /code && yarn install && yarn start"
# #    volumes:
# #      - ./client:/code
#     ports:
#       - "3000:3000"
#     depends_on:
#       - django
#     networks:
#       - traefik
#     labels:
#       - traefik.http.services.react-backend.loadbalancer.server.port=3000
#       - traefik.http.routers.react.service=react-backend
#       - traefik.http.routers.react.rule= PathPrefix(`/scoreboard`) || PathPrefix(`/challenges`) || PathPrefix(`/admin`) || PathPrefix(`/team`) || PathPrefix(`/register`) || PathPrefix(`/posts`) || PathPrefix(`/instructions`) ||PathPrefix(`/login`)
#       - traefik.http.routers.react.middlewares=errorhandler@docker
#       # this seperate rule for the default route is necessary for dashboard to work - this is due to the fact that traefik evaluates longest rule first. 
#       - traefik.http.routers.default2.rule=PathPrefix(`/`)
#       - traefik.http.routers.default2.middlewares=errorhandler@docker


  reverse-proxy:
      # The official v2.0 Traefik docker image
      image: traefik:v2.0.6
      container_name: reverse-proxy
      restart: unless-stopped
      # Enables the web UI and tells Traefik to listen to docker
      #command: --providers.docker --accesslog=true  --api.insecure=true --api.dashboard=true
      command: --providers.docker --accesslog=true  --api.insecure=true
      ports:
        # The HTTP port
        - "80:80"
        # The Web UI (enabled by --api.insecure=true)
        #- "8080:8080"
      volumes:
        # So that Traefik can listen to the Docker events
        - /var/run/docker.sock:/var/run/docker.sock
        
      labels:
        # error handling definition:
        - traefik.http.middlewares.errorhandler.errors.status=404
        - traefik.http.middlewares.errorhandler.errors.service=errorhandler-backend
        - traefik.http.middlewares.errorhandler.errors.query=/graphql/
        - traefik.http.routers.api.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)
        - "traefik.http.routers.api.service=api@internal"
        - traefik.http.routers.api.middlewares=errorhandler@docker
       
      depends_on:
        - django
      networks:
        - traefik

  nginx:
    build:
      context: .
      dockerfile: ./server/nginx/dockerfile-nginx
    container_name: nginx
    restart: unless-stopped  
    ports:
      - 3000:8080
    volumes:
      # for serving client (react) files
      - static_volume_prod:/home/app/redctf/static
      - media_volume_prod:/home/app/redctf/media
    labels:
      - traefik.http.services.nginx-backend.loadbalancer.server.port=3000
      - traefik.http.routers.nginx.service=react-backend
      # routes (in order of React routes): 
      # login, register, posts, admin, challenges, instructions, 
      # scoreboard, team
      - traefik.http.routers.nginx.rule= PathPrefix(`/login`) || PathPrefix(`/register`) || PathPrefix(`/posts`) || PathPrefix(`/admin`) || PathPrefix(`/challenges`) || PathPrefix(`/instructions`) || PathPrefix(`/scoreboard`) ||PathPrefix(`/team`)
      - traefik.http.routers.nginx.middlewares=errorhandler@docker
      # this seperate rule for the default route is necessary for dashboard to work - this is due to the fact that traefik evaluates longest rule first. 
      - traefik.http.routers.default2.rule=PathPrefix(`/`)
      - traefik.http.routers.default2.middlewares=errorhandler@docker
    depends_on:
      - django
    networks:
      - traefik

networks:
  traefik:
        
volumes:
  rethink_data_prod:
  postgres_data_prod:
  static_volume_prod:
  media_volume_prod: